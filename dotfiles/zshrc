#!/bin/zsh

# set up zsh history file 
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=1000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt SHARE_HISTORY             # Share history between all sessions. Also works as INC_APPEND_HISTORY

# update fpath to include custom completion files, see https://github.com/zsh-users/zsh-completions/blob/master/zsh-completions-howto.org#telling-zsh-which-function-to-use-for-completing-a-command
fpath=($HOME/.config/zsh-completions $fpath)

# source antidote
source $HOME/.antidote/antidote.zsh

autoload -Uz compinit
ZSH_COMPDUMP=${ZSH_COMPDUMP:-${ZDOTDIR:-~}/.zcompdump}

# copy and pasted, this is supposed to cache completions to reduce shell load times
# cache .zcompdump for about a day
if [[ $ZSH_COMPDUMP(#qNmh-20) ]]; then
  compinit -C -d "$ZSH_COMPDUMP"
else
  compinit -i -d "$ZSH_COMPDUMP"; touch "$ZSH_COMPDUMP"
fi
{
  # compile .zcompdump
  if [[ -s "$ZSH_COMPDUMP" && (! -s "${ZSH_COMPDUMP}.zwc" || "$ZSH_COMPDUMP" -nt "${ZSH_COMPDUMP}.zwc") ]]; then
    zcompile "$ZSH_COMPDUMP"
  fi
} &!

# fzf-tab needs to be loaded after compninit but before plugins which will wrap widgets, such as zsh-autosuggestions or fast-syntax-highlighting
# not included in zsh_plugins.txt because it doesn't load it in the correct order
source $HOME/fzf-tab/fzf-tab.plugin.zsh

# initialize plugins statically with ${ZDOTDIR:-~}/.zsh_plugins.txt
antidote load

export DOTDROP_PROFILE={{@@ local_profile @@}}

# General PATH updates
export PATH="$PATH:/usr/local/bin:/usr/local/lib:/opt/homebrew/bin:$HOME/git/git-sync:$HOME/git/git-sync/contrib:$HOME/.cargo/bin:$HOME/.local/bin:$HOME/fvm/default/bin"

export XDG_CONFIG_HOME="$HOME/.config"

# Color options for cli 
# enable colors in the cli
export CLICOLOR=1
# set colors that 'ls' command will use and display in cli
export LSCOLORS=ExFxBxDxCxegedabagacad

# ALIASES
alias place_displays_home='displayplacer "id:4ED03108-0390-4016-6ED0-D1D84F2102C5 res:2560x1600 color_depth:8 scaling:off origin:(0,0) degree:0" "id:61A09114-B3A2-27AE-C9BB-FD6CD102F640 res:3840x2160 hz:60 color_depth:8 scaling:off origin:(-2656,-2160) degree:0" "id:E1C7ACF2-F1A9-B218-C9FF-BD8DFA835B57 res:3840x2160 hz:60 color_depth:8 scaling:off origin:(1184,-2160) degree:0"'
alias place_displays_work='displayplacer "id:2E7FC41C-2E3B-63A0-F2F0-3B9DB191A1E5 res:2880x1800 color_depth:8 scaling:off origin:(0,0) degree:0" "id:61A09114-B3A2-27AE-C9BB-FD6CD102F640 res:3840x2160 hz:60 color_depth:8 scaling:on origin:(-2475,-2160) degree:0" "id:E1C7ACF2-F1A9-B218-C9FF-BD8DFA835B57 res:3840x2160 hz:60 color_depth:8 scaling:on origin:(1365,-2160) degree:0"'
# copies terminfo for kitty over to remote shells, may hang when in zellij
# but once terminfo is copied I can just use regular ssh
alias s="kitty +kitten ssh"


# Dotdrop
export DOTREPO="$HOME/git/dotfiles"
alias dotdrop="$DOTREPO/dotdrop.sh"
# end Dotdrop

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# fzf hook
# needs to happen after zsh vi mode plugin is initialized in order to get everything to work correclty. See https://github.com/jeffreytse/zsh-vi-mode/issues/24
zvm_after_init_commands+=('[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh')

# starship hook
eval "$(starship init zsh)"

# zvm configuration
export EDITOR=nvim
export ZVM_VI_EDITOR=$EDITOR
ZVM_VI_INSERT_ESCAPE_BINDKEY=jk

# ranger configuration
RANGER_LOAD_DEFAULT_RC=false
#
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# task zsh-completions, see https://github.com/go-task/task/blob/f22389a82440286eb0e2457ac0b272d47c3cfead/docs/docs/installation.md#setup-completions
# needed to specifically autoload _task and compdef _task for some reason, not sure why. 
autoload -U _task
compdef _task task

export _ZO_ECHO=1
eval "$(zoxide init zsh)"

# pyenv setup
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# secrets via 1password
# on windows with WSL, alias to windows op cli tool to integrate with desktop auth. May break some scripts as passing env vars to windows exe may not work correctly
# if command -v op.exe > /dev/null 2>&1; then
#   alias op=op.exe
# fi
# Alternatively, symlink op.exe to op via `sudo ln -s $(which op.exe) /usr/local/bin/op`
# That's what I've currently done

# # Load ANTHROPIC_API_KEY from 1Password if not already set
# if [[ -z "$PERSONAL_ANTHROPIC_API_KEY" ]]; then
#   if command -v op >/dev/null 2>&1; then
#     api_key=$(op item get "Anthropic - key-1" --format json --field credential 2>&1 | jq .reference 2>&1 | sed "s/\"//g" 2>&1) 
#     if [[ $? -eq 0 ]]; then
#       export PERSONAL_ANTHROPIC_API_KEY=$(op read "$api_key")
#       echo "✓ Loaded PERSONAL_ANTHROPIC_API_KEY from 1Password"
#     else
#       echo "⚠️  Failed to load PERSONAL_ANTHROPIC_API_KEY from 1Password: $api_key" >&2
#     fi
#   else
#     echo "⚠️  1Password CLI (op) not found - skipping PERSONAL_ANTHROPIC_API_KEY load" >&2
#   fi
# fi
#
# if [[ -z "$PERSONAL_OPENAI_API_KEY" ]]; then
#   if command -v op >/dev/null 2>&1; then
#     api_key=$(op item get "OpenAI - key-1" --format json --field credential 2>&1 | jq .reference 2>&1 | sed "s/\"//g" 2>&1) 
#     if [[ $? -eq 0 ]]; then
#       export PERSONAL_OPENAI_API_KEY=$(op read "$api_key")
#       echo "✓ Loaded PERSONAL_OPENAI_API_KEY from 1Password"
#     else
#       echo "⚠️  Failed to load PERSONAL_OPENAI_API_KEY from 1Password: $api_key" >&2
#     fi
#   else
#     echo "⚠️  1Password CLI (op) not found - skipping PERSONAL_OPENAI_API_KEY load" >&2
#   fi
# fi
